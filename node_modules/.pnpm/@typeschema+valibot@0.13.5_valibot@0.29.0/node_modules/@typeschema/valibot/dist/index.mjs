// src/index.ts
import {
  createAssert,
  createToJSONSchema,
  createValidate,
  createWrap
} from "@typeschema/core";

// src/serialization.ts
import { memoize } from "@typeschema/core";
var importSerializationModule = memoize(async () => {
  try {
    var dynamicallyImportedModule = await import(
      /* webpackIgnore: true */
      "@gcornut/valibot-json-schema"
    );
  } catch (moduleImportError) {
    throw moduleImportError;
  }
  const { toJSONSchema: toJSONSchema2 } = dynamicallyImportedModule;
  return { toJSONSchema: toJSONSchema2 };
});
var serializationAdapter = async (schema) => {
  const { toJSONSchema: toJSONSchema2 } = await importSerializationModule();
  return toJSONSchema2({ ignoreUnknownValidation: true, schema });
};

// src/validation.ts
import { memoize as memoize2 } from "@typeschema/core";
var importValidationModule = memoize2(async () => {
  try {
    var dynamicallyImportedModule = await import(
      /* webpackIgnore: true */
      "valibot"
    );
  } catch (moduleImportError) {
    throw moduleImportError;
  }
  const { getDotPath, safeParseAsync } = dynamicallyImportedModule;
  return { getDotPath, safeParseAsync };
});
var validationAdapter = async (schema) => {
  const { getDotPath, safeParseAsync } = await importValidationModule();
  return async (data) => {
    const result = await safeParseAsync(schema, data);
    if (result.success) {
      return {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        data: result.output,
        success: true
      };
    }
    return {
      issues: result.issues.map((issue) => ({
        message: issue.message,
        path: getDotPath(issue)?.split(".")
      })),
      success: false
    };
  };
};

// src/index.ts
var validate = createValidate(validationAdapter);
var assert = createAssert(validate);
var wrap = createWrap(assert, validate);
var toJSONSchema = createToJSONSchema(serializationAdapter);
export {
  assert,
  serializationAdapter,
  toJSONSchema,
  validate,
  validationAdapter,
  wrap
};
