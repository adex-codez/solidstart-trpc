import * as _typeschema_core from '@typeschema/core';
import { Resolver, IfDefined, SerializationAdapter, ValidationAdapter, SchemaFrom, UnknownIfNever, OutputFrom, InputFrom } from '@typeschema/core';
import { GenericSchema, GenericSchemaAsync, InferInput, InferOutput } from 'valibot';

interface AdapterResolver extends Resolver {
    base: IfDefined<GenericSchema | GenericSchemaAsync, 'valibot'>;
    input: this['schema'] extends this['base'] ? InferInput<this['schema']> : never;
    output: this['schema'] extends this['base'] ? InferOutput<this['schema']> : never;
}

declare const serializationAdapter: SerializationAdapter<AdapterResolver>;

declare const validationAdapter: ValidationAdapter<AdapterResolver>;

type Schema = SchemaFrom<AdapterResolver>;
type Infer<TSchema extends Schema> = UnknownIfNever<OutputFrom<AdapterResolver, TSchema>>;
type InferIn<TSchema extends Schema> = UnknownIfNever<InputFrom<AdapterResolver, TSchema>>;
declare const validate: _typeschema_core.Validate<AdapterResolver>;
declare const assert: _typeschema_core.Assert<AdapterResolver>;
declare const wrap: _typeschema_core.Wrap<AdapterResolver>;
declare const toJSONSchema: _typeschema_core.ToJSONSchema<AdapterResolver>;

export { type AdapterResolver, type Infer, type InferIn, type Schema, assert, serializationAdapter, toJSONSchema, validate, validationAdapter, wrap };
